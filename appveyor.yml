# vim ft=yaml
# CI on Windows via appveyor

environment:
  global:
    PYPI_VERSION: "1.1.0"
    NP_BUILD_DEP: "cython"
    NP_TEST_DEP: ""
    OTHER_BUILD_DEP: ""
    OTHER_TEST_DEP: ""

  matrix:
    - PYTHON: C:\Python37-x64
      NP_BUILD_DEP: cython
      NP_TEST_DEP: ""
    - PYTHON: C:\Python38-x64
      NP_BUILD_DEP: cython
      NP_TEST_DEP: ""
    - PYTHON: C:\Python39-x64
      NP_BUILD_DEP: cython
      NP_TEST_DEP: ""
    - PYTHON: C:\Python310-x64
      NP_BUILD_DEP: cython
      NP_TEST_DEP: ""
    - PYTHON: C:\Python311-x64
      NP_BUILD_DEP: cython
      NP_TEST_DEP: ""

matrix:
  fast_finish: true

install:
  # Fetch submodules
  - git submodule update --init --recursive

  # Install new Python if necessary
  - ps: .\multibuild\install_python.ps1

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%
  - python -m pip install -U pip setuptools

  # Fix MSVC builds for 64-bit Python. See:
  # http://stackoverflow.com/questions/32091593/cannot-install-windows-sdk-7-1-on-windows-10
  - echo "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 > "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64/vcvars64.bat"

  # Check that we have the expected version and architecture for Python
  - python --version
  - python -c "import struct; print(struct.calcsize('P') * 8)"

build_script:
  # Install the dependencies of the project
  - python -m pip install %NP_BUILD_DEP% %OTHER_BUILD_DEP%
  # Install build
  - python -m pip install build
  # Build
  - python -m build
  - cd ..

test_script:
  # Create test env
  - virtualenv --python %PYTHON%\Python.exe test_env
  - test_env\Scripts\activate.bat
  - where python
  # No test dependencies needed. Commented out
  # - python -m pip install %NP_TEST_DEP% %OTHER_TEST_DEP%

  # Install from wheel
  - python -m pip install --pre --no-index --find-links turbobase64\dist\ turbob64
  # Run tests
  - python --version
  - python -c "import turbob64; turbob64.b64encode(b'works')"

artifacts:
  - path: "dist\\*"

on_success:
  # Patch file name to only install on the current python version
  - ps: $ver = & python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')"; $pypiVersion = $env:PYPI_VERSION; Rename-Item -Path "turbobase64/dist/turbob64-$pypiVersion-py3-none-any.whl" -NewName "turbob64-$pypiVersion-$ver-$ver-win_amd64.whl"
  # Install twine and check package
  - python -m pip install twine
  - twine check turbobase64/dist/*
  # Upload to pypi. Ignore failure
  - twine upload turbobase64/dist/*.tar.gz || set ERRORLEVEL=0
  - twine upload turbobase64/dist/*.whl || set ERRORLEVEL=0
